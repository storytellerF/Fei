plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id "com.starter.easylauncher" version "6.3.0"
}

android {
    namespace 'com.storyteller_f.fei'
    compileSdk 34

    defaultConfig {
        applicationId "com.storyteller_f.fei"
        minSdk 21
        targetSdk 34
        versionCode 7
        versionName "1.7"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        def path = System.getenv("storyteller_f_sign_path")
        def alias = System.getenv("storyteller_f_sign_alias")
        def signStorePassword = System.getenv("storyteller_f_sign_store_password")
        def signKeyPassword = System.getenv("storyteller_f_sign_key_password")
        if (path != null && alias != null && signStorePassword != null && signKeyPassword != null) {
            create("release") {
                keyAlias = alias
                keyPassword = signKeyPassword
                storeFile = file(path)
                storePassword = signStorePassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix = ".debug"
            resValue(
                    "string",
                    "leak_canary_display_activity_label",
                    "Fei"
            )
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            def releaseSignConfig = signingConfigs.findByName("release")
            if (releaseSignConfig != null)
                signingConfig = releaseSignConfig
        }
    }
    def javaVersion = JavaVersion.VERSION_17
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.12'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            pickFirsts += ['META-INF/*', '/META-INF/io.netty.versions.properties']
        }
        jniLibs {
            pickFirsts += ['META-INF/*']
        }
    }
//    splits {
//
//        // Configures multiple APKs based on ABI.
//        abi {
//            enable true
//            include "x86", "x86_64", "arm64-v8a", "armeabi-v7a"
//            universalApk true
//        }
//    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose

    implementation libs.androidx.ui
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.rules
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    implementation libs.androidx.material3
    debugImplementation libs.androidx.customview
    debugImplementation libs.androidx.customview.poolingcontainer

    implementation libs.accompanist.systemuicontroller
    implementation libs.accompanist.permissions

    implementation libs.androidx.navigation.compose

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core

    //ktor
    implementation(libs.bundles.ktor.server)
    implementation(libs.bundles.ktor.client)

    implementation(libs.bundles.coruntines)


    implementation libs.logback.android
    implementation libs.zxing.core

    implementation libs.compose.prefs3
    implementation libs.androidx.datastore.preferences

    implementation(libs.androidx.webkit)
    implementation(libs.androidx.browser)

    implementation(libs.androidx.core.splashscreen)
    debugImplementation libs.leakcanary.android

    def baoFolder = project.ext.baoFolder
    def baoModule = findProject(":bao:startup")
    if (baoFolder == "local" && baoModule != null)
        implementation(baoModule)
    else
        implementation("com.github.storytellerF.Bao:startup:e978cf52f2")

    def yongFolder = project.ext.yongFolder
    def yongModule = findProject(":yong:library")
    if (yongFolder == "local" && yongModule != null) {
        testImplementation(yongModule)
    }
    implementation(libs.coil.compose)
}
